library(vcd)
library(lubridate)
library(stringr)
library(dplyr)

data = read.csv('./data/func-10min-november.csv')

# Replacing NA values & dates
data$incoming_intensity[is.na(data$incoming_intensity)] = 0
data$period_date = str_replace_all(data$period_date, "T", " ")
data$period_date = as_datetime(data$period_date)
summary(data$incoming_intensity)
hist(data$incoming_intensity)

var(data$incoming_intensity)
sd(data$incoming_intensity)
mean(data$incoming_intensity)

daily = filter(data, day(data$period_date) == 10)
plot(daily$incoming_intensity, type = "l")

shapiro.test(data$incoming_intensity[1:5000])
poisson.test(sum(data$incoming_intensity), length(data$incoming_intensity), mean(data$incoming_intensity))

# Example poisson distribution
x.poi<-rpois(n=5040,lambda=mean(data$incoming_intensity))
hist(x.poi)
gf.poi = goodfit(x.poi, type="poisson", method="MinChisq")
summary(gf.poi)

data %>% 
  filter(hour(period_date) == 14) %>% 
  {table(.$incoming_intensity)} %>% 
  goodfit(type= "poisson", method="ML") %>% 
  summary()



## decomposition of CO2 data
# co2.decomp <- decompose(co2)

## plot the obs ts, trend & seasonal effect
# plot(co2.decomp, yax.flip = TRUE)





# 
# Testing whole list
# 

# Calculating stats
incoming.frequency = table(data$incoming_intensity)

# Goodfit poisson test
gf.all = goodfit(incoming.frequency, type= "poisson", method="MinChisq")
summary(gf.all)
plot(gf.all, main="Data vs Poisson distribution - all")
plot(incoming.frequency, main="Distribution - all")



# 
# Testing work days & weekends separately
# 
data.workdays = filter(data, day_of_week %in% 1:5)
data.weekends = filter(data, day_of_week %in% 6:7)

# Calculating stats
workdays.incoming.frequency = table(data.workdays$incoming_intensity)
weekends.incoming.frequency = table(data.weekends$incoming_intensity)

# Goodfit poisson test workdays
gf.workdays = goodfit(weekends.incoming.frequency, type= "poisson", method="MinChisq")
summary(gf.workdays)
plot(gf.workdays, main="Data vs Poisson distribution - workdays")
plot(weekends.incoming.frequency, main = "Distribution - workdays")

# Goodfit poisson test
gf.weekends = goodfit(weekends.incoming.frequency, type= "poisson", method="MinChisq")
summary(gf.weekends)
plot(gf.weekends, main="Data vs Poisson distribution - weekends")
plot(weekends.incoming.frequency, main = "Distribution - weekends")



# 
# Testing day/night separately
# 
data.day_time = filter(data, hour(period_date) %in% 12:22)
data.night_time = filter(data, hour(period_date) %in% c(0:11, 23))

# Calculating stats
day_time.incoming.frequency = table(data.day_time$incoming_intensity)
night_time.incoming.frequency = table(data.night_time$incoming_intensity)

# Goodfit poisson test day_time
gf.day_time = goodfit(day_time.incoming.frequency, type= "poisson", method="MinChisq")
summary(gf.day_time)
plot(gf.day_time, main="Data vs Poisson distribution - day time")
plot(day_time.incoming.frequency, main = "Distribution - day time")

# Goodfit poisson test night
gf.night_time = goodfit(night_time.incoming.frequency, type= "poisson", method="MinChisq")
summary(gf.night_time)
plot(gf.night_time, main="Data vs Poisson distribution - night time")
plot(night_time.incoming.frequency, main = "Distribution - night time")




# 
# Testing hours separately
# 

data.by_hour = data %>% 
  group_by(hour(period_date)) %>% 
  summarise(incoming_intensity = mean(incoming_intensity))
plot(data.by_hour)

data.12 = filter(data, hour(period_date) == 12)
hist(data.12$incoming_intensity)
summary(data.12$incoming_intensity)
length(data.12$incoming_intensity)
